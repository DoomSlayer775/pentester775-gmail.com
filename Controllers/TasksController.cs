using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using MatrixTest.Models.Authentication;
using MatrixTest.Models.Emails;
using MatrixTest.Models.Helpers;
using MatrixTest.Models.ProjectManagementRepository;
using MatrixTest.Models.RepositoryManager.TasksManager;
using MatrixTest.Models.Tasks.ModelMV;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json.Linq;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace MatrixTest.Controllers
{
    [Authorize]
    public class TasksController : Controller
    {
        IEmailSender emailDispatcher;

        ITaskRepository<TaskMV> taskRepository;

        IUserAuthenticationManager userManager;
        public TasksController(IEmailSender emailSender, ITaskRepository<TaskMV> tasks, IUserAuthenticationManager useranager)
        {
            emailDispatcher= emailSender;

            taskRepository = tasks;

            userManager = useranager;
        }
        // 3.	לאפשר שליפה של משימות לפי כתובת מייל.
        [HttpGet]
        [Authorize]
        [ValidateModel]
        public List<TaskMV> GetTaskByUserMail(string email)
        {

            return taskRepository.GetAllTasksByUserMail(email);
        }


        //4.	לאפשר שליחת רשימת משימות במייל ע"י שימוש ב JWT (לוודא שכל אחד מקבל רק את המשימות שלו).
        [Authorize]
        [ValidateModel]
        public IActionResult SendEmail()
        { 
            int userId = Convert.ToInt32(User.FindFirst(ClaimTypes.Name).Value);

            string userEmail = userManager.GetEmailByUserID(userId);

            if(String.IsNullOrEmpty(userEmail))
              return BadRequest(new { message = "User Email doesnt exist." });

            List<TaskMV>  tasks= taskRepository.GetAllTasksByUserId(userId);

            foreach (TaskMV task in tasks)
            {
                emailDispatcher.SetEmailBody(userEmail, task.Name, Convert.ToDateTime(task.TaskDeadLine));
                emailDispatcher.SendEmail();
            }

            return Ok();
        }


        //5.	לאפשר הוספת משימות.
        //רשימת משימות (שם משימה, תאריך יעד לביצוע, עדיפות (גבוהה, בינונית, נמוכה)), 
        [HttpPost]
        [Authorize]
        [ValidateModel]  
        public int AddTask([FromBody]TaskMV taskRequestMV)
        {
            return taskRepository.AddTask(taskRequestMV);
        }


        //6.	לאפשר שיתוף משימות + שליחת מייל עם המשימות ששותפו לאדם איתו שותפו המשימות.
        [HttpPost]
        [Authorize]
        [ValidateModel]
        public IActionResult AddTaskShareAndEmail([FromBody]TaskShareAndEmailMV taskRequestMV)
        {
        
            string userEmail = userManager.GetEmailByUserID(taskRequestMV.UserId);

            if (String.IsNullOrEmpty(userEmail))
                return BadRequest(new { message = "User Email doesnt exist." });

            //Add task to user 
            TaskMV taskMv = taskRepository.GetTask(taskRequestMV.TaskId);

            emailDispatcher.SetEmailBody(userEmail, taskMv.Name, Convert.ToDateTime(taskMv.TaskDeadLine));

            emailDispatcher.SendEmail();
            return Ok();
        }

        //7.	לאפשר עדכון משימות 
        //9.	לאפשר ביצוע משימות
        [HttpPost]
        [Authorize]
        [ValidateModel]
        public int UpdateTask([FromBody]TaskMV taskRequestMV)
        {
            return taskRepository.UpdateTask(taskRequestMV);
        }

        //8.	לאפשר ביטול משימות
        [HttpPost]
        [Authorize]
        [ValidateModel]
        public void DeleteTask([FromBody]Dictionary<string,int> postParameter)
        {
            int id = postParameter["Id"];
            taskRepository.DeleteTask(id);
        }

   
    }
}
