using MatrixTest.Models.ProjectManagementRepository;
using MatrixTest.Models.Tasks.ModelMV;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;

namespace MatrixTest.Models.RepositoryManager.TasksManager
{
    public class TaskOperationsManager : ITaskRepository<TaskMV>
    {
        private readonly UserTasksContext _db;
        public TaskOperationsManager(UserTasksContext context)
        {
            _db = context;
        }

        public List<TaskMV> GetAllTasksByUserMail(string email)
        {
            List<TaskMV> taskList = new List<TaskMV>();

            var res = from user in _db.Users
                      join tasks in _db.Tasks on user.Id equals tasks.UserId
                      where user.Mail == email
                      select tasks;

            foreach (Task task in res)
            {
                TaskMV mv = new TaskMV();
                mv.Id = task.Id;
                mv.Name = task.Name;
                mv.Priority = task.Priority;
                mv.IsCancelled = task.IsCancelled;
                mv.IsAccomplished = task.IsAccomplished;
                taskList.Add(mv);
            }

            return taskList;
        }

        public List<TaskMV> GetAllTasksByUserId( int userID)
        {
            List<TaskMV> taskList = new List<TaskMV>();

            var res = from user in _db.Users
                      join tasks in _db.Tasks on user.Id equals tasks.UserId
                      where user.Id == userID
                      select tasks;

            foreach (Task task in res)
            {
                TaskMV mv = new TaskMV();
                mv.Id = task.Id;
                mv.Name = task.Name;
                mv.Priority = task.Priority;
                mv.IsCancelled = task.IsCancelled;
                mv.IsAccomplished = task.IsAccomplished;
                taskList.Add(mv);
            }

            return taskList;
        }


        public int AddTask(TaskMV taskRequestMV)
        {
            Task task = new Task();
            task.Name = taskRequestMV.Name;
            task.Priority = taskRequestMV.Priority;
            task.UserId = taskRequestMV.UserId;
            task.TaskDeadLine = Convert.ToDateTime(taskRequestMV.TaskDeadLine);
            task.UserId = taskRequestMV.UserId;
            task.IsCancelled = taskRequestMV.IsCancelled;
            task.IsAccomplished = taskRequestMV.IsAccomplished;
            _db.Tasks.Add(task);
            _db.SaveChanges();

            return task.Id;
        }

        public int UpdateTask(TaskMV taskRequestMV)
        {
            Task task = _db.Tasks.Where(x => x.Id == taskRequestMV.Id).FirstOrDefault();

            if (task == null)
                return 0;

            task.Name = taskRequestMV.Name;
            task.Priority = taskRequestMV.Priority;
            task.UserId = taskRequestMV.UserId; 
            task.TaskDeadLine = Convert.ToDateTime(taskRequestMV.TaskDeadLine);
            task.UserId = taskRequestMV.UserId;
            task.IsCancelled = taskRequestMV.IsCancelled;
            task.IsAccomplished = taskRequestMV.IsAccomplished;
            _db.Entry(task).State = EntityState.Modified;
            _db.SaveChanges();


            return task.Id;
        }

        public void DeleteTask(int taskID)
        {
            Task entity = _db.Tasks.Where(x=>x.Id== taskID).FirstOrDefault();
            _db.Tasks.Remove(entity);
            _db.SaveChanges();
        }
    }
}
