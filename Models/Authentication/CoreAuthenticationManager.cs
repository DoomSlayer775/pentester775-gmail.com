using MatrixTest.Models.Authentication.ModelMV;
using MatrixTest.Models.Helpers;
using MatrixTest.Models.ProjectManagementRepository;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace MatrixTest.Models.Authentication
{
    public class CoreAuthenticationManager : IUserAuthenticationManager
    {

        private readonly AppSettings _appSettings;

        private readonly UserTasksContext _db;

        public CoreAuthenticationManager(IOptions<AppSettings> appSettings, UserTasksContext context)
        {
            _appSettings = appSettings.Value;
            _db = context;
        }


        public string RegisterUser(UserMV userRegisteredMV)
        {
            User user = new User();

            user.FirstName = userRegisteredMV.FirstName;

            user.LastName = userRegisteredMV.LastName;

            user.Username = userRegisteredMV.Username;

            user.Password = userRegisteredMV.Password;

            user.Phone = userRegisteredMV.Phone;

            user.Mail = userRegisteredMV.Mail;

            user.Gender = userRegisteredMV.Gender;

            user.Address = userRegisteredMV.Address;

            user.City = userRegisteredMV.City;

            _db.Add(user);

            _db.SaveChanges();

            return GenerateJWTToken(user);
        }

        public UserMV UserAuthenticationExists(UserRequestMV userRequestMV)
        { 
            User user = _db.Users.Where(x => x.Username == userRequestMV.Username && x.Password == userRequestMV.Password).FirstOrDefault();

            // return null if user not found
            if (user == null)
                return null; 
            string userAuthToken = GenerateJWTToken(user);

            return user.GetUserResponseObj(userAuthToken);

        }


        public string GetEmailByUserID(int userID)
        {

            User user = _db.Users.Where(x => x.Id == userID).FirstOrDefault();

            // return null if user not found
            if (user == null)
                return null; 

            return user.Mail;

        }

        //7.	לממש את הכללים של Oauth2.0.
        private string GenerateJWTToken(User user)
        {
            // authentication successful so generate jwt token
            var tokenHandler = new JwtSecurityTokenHandler();

            var key = Encoding.ASCII.GetBytes(_appSettings.Secret);

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim(ClaimTypes.Name, user.Id.ToString())
                }),

                Expires = DateTime.UtcNow.AddDays(1),

                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);

             return tokenHandler.WriteToken(token);
        }
    }
}
