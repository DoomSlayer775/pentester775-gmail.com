using MatrixTest.Models.Authentication.ModelMV;
using MatrixTest.Models.Helpers;
using MatrixTest.Models.ProjectManagementRepository;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace MatrixTest.Models.Authentication
{
    public class CoreAuthenticationManager  : IUserAuthenticationManager
    {

        private readonly AppSettings _appSettings;

        public CoreAuthenticationManager(IOptions<AppSettings> appSettings)
        {
            _appSettings = appSettings.Value;
        }


        private List<User> _users = new List<User>
        {
            new User { Id = 1, FirstName = "Test", LastName = "User", Username = "test", Password = "test" }
        };

        public User UserAuthenticationExists(UserRequestMV userRequestMV)
        {

            User user = _users.SingleOrDefault(x => x.Username == userRequestMV.Username && x.Password == userRequestMV.Password);  

            // return null if user not found
            if (user == null)
                return null;
        
            // authentication successful so generate jwt token
            var tokenHandler = new JwtSecurityTokenHandler();

            var key = Encoding.ASCII.GetBytes(_appSettings.Secret);
            
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim(ClaimTypes.Name, user.Id.ToString())
                }),

                Expires = DateTime.UtcNow.AddDays(1),

                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);

            user.Token = tokenHandler.WriteToken(token);

            return user.WithoutPassword();
           
        }

        
    }
}
